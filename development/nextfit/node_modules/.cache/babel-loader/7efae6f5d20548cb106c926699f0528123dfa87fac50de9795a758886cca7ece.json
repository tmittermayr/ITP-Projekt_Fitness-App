{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Highcharts from 'highcharts';\nimport axios from 'axios';\nimport { Preferences } from \"@capacitor/preferences\";\nexport default {\n  data() {\n    return {\n      minutesData: [120, 80, 140, 90, 110, 100, 130] // Beispiel: Array mit Minutenwerten\n    };\n  },\n\n  mounted() {\n    this.getData();\n  },\n  methods: {\n    renderChart() {\n      const data = this.generateData(); // Generiere das Array mit den Daten\n\n      Highcharts.chart('chart', {\n        title: {\n          text: 'Minuten trainiert (min):'\n        },\n        xAxis: {\n          type: 'datetime',\n          title: {\n            text: 'Datum'\n          },\n          labels: {\n            formatter: function () {\n              return Highcharts.dateFormat('%e. %b', this.value); // Formatierung des Datums\n            }\n          },\n\n          tickPositioner: function () {\n            const positions = [];\n            const currentDate = new Date();\n            for (let i = 6; i >= 0; i--) {\n              const date = new Date(currentDate.getTime() - i * 24 * 60 * 60 * 1000);\n              positions.push(date.getTime());\n            }\n            return positions;\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Minuten'\n          }\n        },\n        series: [{\n          name: 'Minuten',\n          data: data,\n          type: 'line',\n          color: '#FBA92C'\n        }]\n      });\n    },\n    generateData() {\n      const data = [];\n      const currentDate = new Date();\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(currentDate.getTime() - i * 24 * 60 * 60 * 1000);\n        const minutes = this.minutesData[i];\n        data.push({\n          x: date.getTime(),\n          y: minutes\n        });\n      }\n      return data;\n    },\n    async getData() {\n      await this.calcData();\n      axios.defaults.headers.common['Authorization'] = `Bearer ${await this.getToken()}`;\n      axios.get('http://localhost:3000/stats/total').then(function (response) {\n        console.log(response.data);\n      });\n      this.renderChart();\n    },\n    async calcData() {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${await this.getToken()}`;\n      return axios.post('http://localhost:3000/stats/calc').then(function (response) {\n        console.log(response.data);\n      });\n    },\n    async getToken() {\n      const {\n        value\n      } = await Preferences.get({\n        key: 'token'\n      });\n      return value ? value : '';\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Highcharts","axios","Preferences","data","minutesData","mounted","getData","methods","renderChart","generateData","chart","title","text","xAxis","type","labels","formatter","dateFormat","value","tickPositioner","positions","currentDate","Date","i","date","getTime","push","yAxis","series","name","color","minutes","x","y","calcData","defaults","headers","common","getToken","get","then","response","console","log","post","key"],"sourceRoot":"","sources":["/Users/janangerer/Desktop/5AHITM/ITP/ITP-Projekt_Fitness-App/development/nextfit/src/components/home/LineChart.vue"],"sourcesContent":["<template>\n  <div id=\"chart\" class=\"rounded-xl\"></div>\n</template>\n\n<script>\nimport Highcharts from 'highcharts';\nimport axios from 'axios';\nimport { Preferences } from \"@capacitor/preferences\";\n\nexport default {\n  data() {\n    return {\n      minutesData: [120, 80, 140, 90, 110, 100, 130] // Beispiel: Array mit Minutenwerten\n    };\n  },\n  mounted() {\n    this.getData();\n  },\n  methods: {\n    renderChart() {\n      const data = this.generateData(); // Generiere das Array mit den Daten\n\n      Highcharts.chart('chart', {\n        title: {\n          text: 'Minuten trainiert (min):'\n        },\n        xAxis: {\n          type: 'datetime',\n          title: {\n            text: 'Datum'\n          },\n          labels: {\n            formatter: function() {\n              return Highcharts.dateFormat('%e. %b', this.value); // Formatierung des Datums\n            }\n          },\n          tickPositioner: function() {\n            const positions = [];\n            const currentDate = new Date();\n\n            for (let i = 6; i >= 0; i--) {\n              const date = new Date(currentDate.getTime() - i * 24 * 60 * 60 * 1000);\n              positions.push(date.getTime());\n            }\n\n            return positions;\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Minuten'\n          }\n        },\n        series: [{\n          name: 'Minuten',\n          data: data,\n          type: 'line',\n          color: '#FBA92C'\n        }]\n      });\n    },\n    generateData() {\n      const data = [];\n      const currentDate = new Date();\n\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(currentDate.getTime() - i * 24 * 60 * 60 * 1000);\n        const minutes = this.minutesData[i];\n\n        data.push({\n          x: date.getTime(),\n          y: minutes\n        });\n      }\n\n      return data;\n    },\n    async getData() {\n      await this.calcData()\n      axios.defaults.headers.common['Authorization'] = `Bearer ${await this.getToken()}`;\n      axios\n        .get('http://localhost:3000/stats/total')\n        .then(function (response) {\n          console.log(response.data) \n        })\n      this.renderChart()\n    },\n    async calcData() {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${await this.getToken()}`;\n      return axios\n        .post('http://localhost:3000/stats/calc')\n        .then(function (response) {\n          console.log(response.data) \n        })\n    },\n    async  getToken() {\n        const { value } = await Preferences.get({ key: 'token' })\n        return value ? value : ''\n    }\n  }\n};\n</script>\n\n<style>\n.chart {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}